#!/usr/local/bin/expect -f

# This script checks if a file named PIPE_FILE exists. If it does, it spawns the NyquistIDE application and interacts with it using the expect command.
# The code opens the PIPE_FILE for reading and enters a loop that reads from the pipe as long as the file exists.
# Each line read from the pipe is passed as a command to the NyquistIDE application using the run_comm procedure.
# After running the command, the code waits for the prompt "SAL> " before reading the next line from the pipe.
# The loop continues until the PIPE_FILE no longer exists, at which point the pipe is closed.

# Function to execute a command
#
# This function takes a command as input and executes it. It sends the command to the system and logs the output.
#
# Parameters:
#   - CMD: The command to be executed
#
# Example usage:
#   run_comm "ls -l"
match_max 9000000
proc run_comm { CMD } {
    send -- "$CMD\n\r"
    set NewLineChar "\n\r"
    expect {
        $NewLineChar { append ny_out $expect_out(buffer); exp_continue}
        eof { append ny_out $expect_out(buffer) }
    }
    # # puts $ny_out

    # # Clear the expect_out(buffer)
    # # puts "$expect_out(buffer)"
    # expect -exact "SAL> "
    # flush stdout
    log_user 1
}

set PIPE_FILE "/tmp/control_editor_pipe"

set input ""


if {[file exists $PIPE_FILE]} {
    spawn /Applications/NyquistIDE.app/Contents/Java/ny
    expect -exact "> "
    send -- "(sal)\r"
    expect -exact "SAL> "
    
    # Open the pipe for reading
    set pipe [open $PIPE_FILE r]
    
    # Loop as long as the pipe exists
    while {[file exists $PIPE_FILE]} {
        # Read from the pipe
        while {$input == ""} {
            set input [read -nonewline $pipe]
        }
        # puts "$input"
        log_user 1
        # Run the command
        run_comm "$input"
        # flush stdout
        log_user 1
        expect -exact "SAL> "
        set input ""
    }
    
    # Close the pipe
    close $pipe
}
